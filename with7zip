from tkinter import *
from tkinter import filedialog
import re
import os
import py7zr

path = "C:\\Users\\elmas\\OneDrive\\Desktop\\fehler finder\\"

root = Tk()
root.title("Fehler finder")

def openFile():
    file = filedialog.askopenfilename(initialdir='/',title="Laden Sie Log Datei hoch")
    
    with py7zr.SevenZipFile(file, mode='r') as compressed:
        
        listOfFileNames = compressed.getnames()
        for fileName in listOfFileNames:
            if fileName.endswith('.log'):
                try:
                    print(fileName)
                    compressed.extract(targets=fileName,path=path)
                except:
                    print("Data could not open")
        for myfile in os.listdir(path):
            if myfile.endswith(".log"):
                with open(os.path.join(path,myfile),'r') as f:
                    text_content = f.read()
    return text_content

def delete_file():
    for myfile in os.listdir(path):
            if myfile.endswith(".log"):
                os.remove(os.path.join(path,myfile))
                print("is deleted")


#def openFile():
#    file = filedialog.askopenfilename(initialdir='/',title="Laden Sie Log Datei hoch")
    
#    content_file = open(file).read()
#    return content_file

def find_fehlers(logfile_content):
    fehlers = []
    finded_CCU = 0
    finded_BMU = 0
    finded_EGS = 0
    finded_DME = 0
    finded_INV = 0
    finded_EPK_Pr = 0
    gesperrt_CCU = 0
    gesperrt_BMU = 0
    gesperrt_EGS = 0
    gesperrt_DME = 0
    gesperrt_INV = 0

    for match in re.finditer(r"INV returned error code 0x24",logfile_content):
        if finded_EPK_Pr == 0:
            fehlers.append("INV EPK Prüfung muss deaktiviert werden")
            finded_EPK_Pr = 1
    
    for match in re.finditer(r" CONNECT timeout",logfile_content):
        if re.findall(r"CCU", logfile_content[match.start()-100:match.start()]):
            if gesperrt_CCU == 0:
                fehlers.append("keine Verbindung mit CCU, SG gesperrt oder nicht in Engineering Mode ")
                gesperrt_CCU = 1
        if re.findall(r"BMU", logfile_content[match.start()-100:match.start()]):
            if gesperrt_BMU == 0:
                fehlers.append("keine Verbindung mit BMU, SG gesperrt oder nicht in Engineering Mode ")
                gesperrt_BMU = 1
        if re.findall(r"CPP ", logfile_content[match.start()-100:match.start()]):  
            if gesperrt_EGS == 0:
                fehlers.append("keine Verbindung mit EGS, SG gesperrt oder nicht in Engineering Mode")
                gesperrt_EGS = 1
        if re.findall(r"EGS", logfile_content[match.start()-100:match.start()]):
            if gesperrt_EGS == 0:
                fehlers.append("keine Verbindung mit EGS, SG gesperrt oder nicht in Engineering Mode ")
                gesperrt_EGS = 1
        if re.findall(r"_default_ModuleName", logfile_content[match.start()-100:match.start()]): 
            if gesperrt_DME == 0:
                fehlers.append("keine Verbindung mit DME, SG gesperrt oder nicht in Engineering Mode ")
                gesperrt_DME = 1
        if re.findall(r"DME", logfile_content[match.start()-100:match.start()]):
            if gesperrt_DME == 0:
                fehlers.append("keine Verbindung mit DME, SG gesperrt oder nicht in Engineering Mode ")
                gesperrt_DME = 1
        if re.findall(r"INV", logfile_content[match.start()-100:match.start()]):
            if gesperrt_INV == 0:
                fehlers.append("keine Verbindung mit INV, SG gesperrt oder nicht in Engineering Mode ")
                gesperrt_INV = 1
    
    for match in re.finditer(r"does not match",logfile_content):
        if re.findall(r"CCU", logfile_content[match.start()-100:match.start()]):
            if finded_CCU == 0:
                fehlers.append("CCU A2L Version stimmt nicht überein ")
                finded_CCU = 1
        if re.findall(r"BMU", logfile_content[match.start()-100:match.start()]):
            if finded_BMU == 0:
                fehlers.append("BMU A2L Version stimmt nicht überein ")
                finded_BMU = 1
        if re.findall(r"CPP ", logfile_content[match.start()-100:match.start()]):  
            if finded_EGS == 0:
                fehlers.append("EGS A2L Version stimmt nicht überein ")
                finded_EGS = 1
        if re.findall(r"EGS", logfile_content[match.start()-100:match.start()]):
            if finded_EGS == 0:
                fehlers.append("EGS A2L Version stimmt nicht überein ")
                finded_EGS = 1
        if re.findall(r"_default_ModuleName ", logfile_content[match.start()-100:match.start()]): 
            if finded_DME == 0:
                fehlers.append("DME A2L Version stimmt nicht überein ")
                finded_DME = 1
        if re.findall(r"DME", logfile_content[match.start()-100:match.start()]):
            if finded_DME == 0:
                fehlers.append("DME A2L Version stimmt nicht überein ")
                finded_DME = 1
        if re.findall(r"INV", logfile_content[match.start()-100:match.start()]):
            if finded_INV == 0 | finded_EPK_Pr == 0:
                fehlers.append("INV A2L Version stimmt nicht überein ")
                finded_INV = 1

    if fehlers == []:
        fehlers.append("Keine Fehler")
    return fehlers    

content_file = openFile()
fehlers = find_fehlers(content_file)

textEditor = Text(root,width=60,height=20,wrap=WORD)
textEditor.pack()
for fehler in fehlers:
    textEditor.insert("end",f"{fehler}\n")

root.geometry("500x400+400+100")
root.mainloop()
delete_file()
